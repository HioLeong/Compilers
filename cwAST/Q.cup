import java_cup.runtime.*;
import ast.*;
import ast.literal.*;
import ast.term.*;
import ast.sequence.*;
import ast.statement.*;
import ast.expression.*;
import visitor.*;
import java.util.*;
import java.util.List;


terminal SEMICOLON, COMMA, DOT, COLON;
terminal LEFTBRACE, RIGHTBRACE;
terminal LEFTBRACKET, RIGHTBRACKET;
terminal LEFTTBRACKET, RIGHTTBRACKET;
terminal LEFTPAREN, RIGHTPAREN;

terminal BOOL, INT, FLOAT, STRING, LIST, CHAR, TUPLE, VOID;
terminal String ID;
terminal Boolean BOOLLITERAL;
terminal Integer INTLITERAL;
terminal Float FLOATLITERAL;
terminal String STRINGLITERAL;
terminal Character CHARLITERAL;

terminal FDEF, TDEF;

terminal ASSIGN;
terminal NOT, OR, AND;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, POWER;
terminal IN, LENGTH, CONCAT;
terminal LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, EQUAL, NOTEQUAL;
terminal IF, ELSE, REPEAT, UNTIL, RETURN, DO, WHILE;

non terminal String type;
non terminal ExprNode expression;
//this line I don't know the type for some 
non terminal TermNode term;
non terminal FactorNode factor;
non terminal ExponentNode exponent;
non terminal Node final;
non terminal AccessNode accessor;
non terminal SeqNode sequence;
non terminal ListSeqNode list;
non terminal TupleSeqNode tuple;
non terminal ExprListNode expression_clist;
non terminal ExprListSNode expression_clist2;
non terminal VarDeclNode var_decl;
non terminal VarTypeNode var_type;
non terminal VarInitNode var_init;

non terminal String function_type;
non terminal FunctionDeclNode function_decl;
non terminal ParameterListNode parameter_clist;
non terminal ParameterListSNode parameter_clist2;

non terminal GlobalDeclListNode global_decl_list;
non terminal GlobalDeclNode global_decl;
non terminal LocalDeclListNode local_decl_list;
non terminal DataTypeDeclNode datatype_decl;

non terminal BlockNode block;
non terminal StmtListNode statement_list;
non terminal StmtNode statement;
non terminal IfElseStmtNode ifelse;
non terminal RepeatUntilStmtNode repeatuntil;
non terminal WhileStmtNode while;
non terminal AssignStmtNode assignment;
non terminal FunctionCallStmtNode function_call;
non terminal ReturnStmtNode return;
non terminal Program program;

precedence right POWER;
precedence left DIVIDE, MULTIPLY;
precedence left PLUS, MINUS;

precedence nonassoc NOT;
precedence left OR, AND;
precedence right IN;
precedence nonassoc LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, EQUAL, NOTEQUAL;

start with program;

type ::= BOOL | INT | FLOAT | STRING | CHAR | LIST | TUPLE | ID;

program ::= 
global_decl_list:g block:b {: RESULT = new Program(g,b); System.out.println("Parsing Complete"); :}
| block:b {: RESULT = new Program(b); System.out.println("Parsing Complete"); :}
;

global_decl_list::= 
global_decl_list:gl global_decl:g 
{: if (gl != null) {
                       gl.statements.add(g);
                       RESULT = new GlobalDeclListNode(gl.statements);
                   } else {
                       List<GlobalDeclNode> res = new ArrayList<GlobalDeclNode>();
                       res.add(g);
                       RESULT = new GlobalDeclListNode(res);
                   }
                :}
| global_decl:g
{: List<GlobalDeclNode> res = new ArrayList<GlobalDeclNode>();
                   res.add(g);
                   RESULT = new GlobalDeclListNode(res); :}
;


global_decl ::= 
datatype_decl:dd {: RESULT = dd;:}
| var_decl:vd
| function_decl:fd {: RESULT = fd; :}
;

function_decl ::= 
FDEF ID:name LEFTPAREN parameter_clist:pl RIGHTPAREN COLON function_type:ft block:b {: RESULT = new FunctionDeclNode(name, pl,ft,b); :}
;

var_type ::= 
ID:name COLON type:t {:RESULT = new VarTypeNode(name,t);:}
; 

var_decl ::= 
var_type:vt var_init:vi SEMICOLON {:RESULT = new VarDeclNode(vt,vi); :};

var_init ::=
ASSIGN expression_clist:el {:RESULT = new VarInitNode(el); :}
|{:  RESULT = null; :}
;

datatype_decl ::=
TDEF ID:name COLON parameter_clist:pl SEMICOLON {: RESULT = new DataTypeDeclNode(name, pl); :}
;

function_type ::= 
VOID 
| type;

//two-productions are needed to avoid ambiguity
parameter_clist ::= 
var_type:vt parameter_clist2:pl {: RESULT = new ParameterListNode(vt,pl); :}
|{: RESULT = null; :}
;

parameter_clist2 ::= 
COMMA var_type:vt parameter_clist2:pl 
{: if (pl != null) {
pl.varTypes.add(vt);
RESULT = new ParameterListSNode(pl.varTypes);
} else {
List<VarTypeNode> types = new ArrayList<VarTypeNode>();
types.add(vt);
RESULT = new ParameterListSNode(types);
}
:}
|{: RESULT = null; :}
;

block ::= 
LEFTBRACE local_decl_list:ldl statement_list:sl RIGHTBRACE {: RESULT = new BlockNode(ldl,sl); :}
| LEFTBRACE statement_list:sl RIGHTBRACE {: RESULT = new BlockNode(sl); :}
;

// Local declaration only allows variable declarations
local_decl_list ::= 
local_decl_list:ldl var_decl:vd
{: if (ldl != null) {
                       ldl.varDecls.add(vd);
                       RESULT = new LocalDeclListNode(ldl.varDecls);
                   } else {
                       List<VarDeclNode> res = new ArrayList<VarDeclNode>();
                       res.add(vd);
                       RESULT = new LocalDeclListNode(res);
                   }
                :}
| var_decl:vd
{: List<VarDeclNode> res = new ArrayList<VarDeclNode>();
                   res.add(vd);
                   RESULT = new LocalDeclListNode(res); :}
;

statement_list ::= 
statement:s statement_list:sl
{: if (sl != null) {
                       sl.statements.add(s);
                       RESULT = new StmtListNode(sl.statements);
                   } else {
                       List<StmtNode> res = new ArrayList<StmtNode>();
                       res.add(s);
                       RESULT = new StmtListNode(res);
                   }
                :}
|{: RESULT = null; :}
;

statement ::= 
assignment
| function_call:fc {: RESULT = fc; :}
| ifelse
| while
| repeatuntil
| return
;

ifelse ::= 
IF LEFTPAREN expression:condition RIGHTPAREN LEFTBRACE statement_list:ifbody RIGHTBRACE ELSE LEFTBRACE statement_list:elsebody RIGHTBRACE {: RESULT = new IfElseStmtNode(condition,ifbody,elsebody); :}
;

while ::=
WHILE LEFTPAREN expression:condition RIGHTPAREN DO LEFTBRACE statement_list:body RIGHTBRACE 
                                  {: RESULT = new WhileStmtNode(condition,body); :}
;

repeatuntil ::= 
REPEAT LEFTBRACE statement_list:body RIGHTBRACE UNTIL LEFTPAREN expression:condition RIGHTPAREN SEMICOLON
                                  {: RESULT = new RepeatUntilStmtNode(body,condition); :}  
;

function_call ::=
ID:name LEFTPAREN expression_clist:parameters RIGHTPAREN
                                 {: RESULT = new FunctionCallStmtNode(name,parameters); :}  
;

return ::= 
RETURN expression:e SEMICOLON {: RESULT = new ReturnStmtNode(e); :}
| RETURN SEMICOLON {: RESULT = new ReturnStmtNode(); :} 
;

assignment ::= 
accessor:a ASSIGN expression:rhs SEMICOLON {: RESULT = new AssignStmtNode(a,rhs); :} 
;

sequence ::=
STRINGLITERAL:str {: RESULT = new StringSeqNode(str); :}
| tuple
| list
;

accessor ::= 
ID:name 
{: List<IdNode> res = new ArrayList<IdNode>();
                   res.add(new IdNode(name));
                   RESULT = new AccessNode(res); :}
| accessor:a DOT ID:name 
{: if (a != null) {
                       a.ids.add(new IdNode(name));
                       RESULT = new AccessNode(a.ids);
                   } else {
                       List<IdNode> res = new ArrayList<IdNode>();
                       res.add(new IdNode(name));
                       RESULT = new AccessNode(res);
                   }
                :}
;

tuple ::= 
LEFTTBRACKET expression_clist:ecl RIGHTTBRACKET {: RESULT = new TupleSeqNode(ecl); :}
;

list ::= 
LEFTBRACKET expression_clist:ecl RIGHTBRACKET {: RESULT = new ListSeqNode(ecl); :}
;

expression_clist ::= 
expression:e expression_clist2:el {:RESULT = new ExprListNode(e,el); :}
|  {: RESULT = null; :}
;

expression_clist2 ::= 
COMMA expression:e expression_clist2:el
{: if (el != null) {
                       el.expressions.add(e);
                       RESULT = new ExprListSNode(el.expressions);
                   } else {
                       List<ExprNode> list = new ArrayList<ExprNode>();
                       list.add(e);
                       RESULT = new ExprListSNode(list);
                   }
                :}
| {: RESULT = null;:}
;
expression ::=
term:t {: RESULT = t; :}
| NOT expression
| expression:e PLUS term:t
{: RESULT = new PlusExprNode(e,t);:}
| expression:e MINUS term:t
{: RESULT = new MinusExprNode(e,t);:}
| expression:e OR term:t
{: RESULT = new OrExprNode(e,t);:}
| expression:e IN term:t
{: RESULT = new InExprNode(e,t);:}
| expression:e LESSTHAN term:t
{: RESULT = new LessThanExprNode(e,t);:}
| expression:e LESSTHANEQUAL term:t
{: RESULT = new LessThanEqualExprNode(e,t);:}
| expression:e GREATERTHAN term:t
{: RESULT = new GreaterThanExprNode(e,t);:}
| expression:e GREATERTHANEQUAL term:t
{: RESULT = new GreaterThanEqualExprNode(e,t);:}
| expression:e EQUAL term:t
{: RESULT = new EqualExprNode(e,t);:}
| expression:e NOTEQUAL term:t
{: RESULT = new NotEqualExprNode(e,t);:}
| expression:e CONCAT term:t
{: RESULT = new ConcatExprNode(e,t);:}
| expression:e LEFTBRACKET expression:e1 COLON expression:e2 RIGHTBRACKET {: RESULT = new ParSeqExprNode(e,e1,e2); :}
| expression:e LEFTBRACKET expression:e1 COLON RIGHTBRACKET {: RESULT = new ParSeqExprNode(e,e1); :}
| expression:e LEFTBRACKET COLON expression:e1 RIGHTBRACKET {: RESULT = new ParSeqExprNode(e,e1); :}
| expression:e LEFTBRACKET expression:e1 RIGHTBRACKET {: RESULT = new ParExprNode(e,e1); :}
;

term ::=
factor:f //{: RESULT = new FactorNode(null,f);:}
| term:t MULTIPLY factor:f {: RESULT = new MultiplyTermNode(t,f); :}
| term:t DIVIDE factor:f {: RESULT = new DivideTermNode(t,f); :}
| term:t POWER factor:f {: RESULT = new PowerTermNode(t,f); :}
| term:t AND factor:f {: RESULT = new AndTermNode(t,f); :}
;

factor ::=
exponent:e POWER factor:f {:RESULT = new FactorNode(e,f);:}
| exponent:e {: RESULT = new FactorNode(e,null); :}
;

exponent ::=
MINUS exponent:e {: RESULT =new ExponentNode(e); :} // Need to sort out minus
| final:f {: RESULT = new ExponentNode(f); :}
;

final ::=
accessor:a {: RESULT = a; :}
| LEFTPAREN expression:e RIGHTPAREN
| INTLITERAL:i {: RESULT = new IntLiteralNode(i); :}
| FLOATLITERAL:f {: RESULT = new FloatLiteralNode(f); :}
| BOOLLITERAL:b {: RESULT = new BoolLiteralNode(b); :}
| CHARLITERAL:c {: RESULT = new CharLiteralNode(c); :}
| function_call:fc {: RESULT = fc;:}
| LENGTH LEFTPAREN expression:e RIGHTPAREN {: RESULT = new LengthFunctionNode(e); :}
| sequence:s // This includes STRINGLITERAL
;