import java_cup.runtime.*;
import ast.*;
import java_util.*;

terminal SEMICOLON, COMMA, DOT, COLON;
terminal LEFTBRACE, RIGHTBRACE;
terminal LEFTBRACKET, RIGHTBRACKET;
terminal LEFTTBRACKET, RIGHTTBRACKET;
terminal LEFTPAREN, RIGHTPAREN;

terminal BOOL, INT, FLOAT, STRING, LIST, CHAR, TUPLE, VOID;
terminal ID, BOOLLITERAL, INTLITERAL, FLOATLITERAL, STRINGLITERAL, CHARLITERAL;

terminal FDEF, TDEF;

terminal ASSIGN;
terminal NOT, OR, AND;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, POWER;
terminal IN, LENGTH, CONCAT;
terminal LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, EQUAL, NOTEQUAL;
class Q extends Parent implements Interface {
	
}
terminal IF, ELSE, REPEAT, UNTIL, RETURN, DO, WHILE;

non terminal type;
non terminal expression, term, factor, exponent, final, accessor;
non terminal sequence, list, tuple;
non terminal expression_clist, expression_clist2;
non terminal var_decl, var_type, var_init;

non terminal function_type, function_decl;
non terminal parameter_clist, parameter_clist2;

non terminal global_decl_list, global_decl, local_decl_list;
non terminal datatype_decl;

non terminal block, statement_list, statement;
non terminal ifelse, repeatuntil, while, assignment, function_call, return;
non terminal program;

precedence right POWER;
precedence left DIVIDE, MULTIPLY;
precedence left PLUS, MINUS;

precedence nonassoc NOT;
precedence left OR, AND;
precedence right IN;
precedence nonassoc LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, EQUAL, NOTEQUAL;

start with program;

type ::= BOOL | INT | FLOAT | STRING | CHAR | LIST | TUPLE | ID;

program ::= 
global_decl_list block {: System.out.println("Parsing Complete"); :}
| block {: System.out.println("Parsing Complete"); :}
;

global_decl_list ::= 
global_decl_list global_decl 
| global_decl;

global_decl ::= 
datatype_decl
| var_decl
| function_decl
;

function_decl ::= 
FDEF ID LEFTPAREN parameter_clist RIGHTPAREN COLON function_type block;

var_type ::= 
ID COLON type
; 

var_decl ::= 
var_type var_init SEMICOLON;

var_init ::=
ASSIGN expression_clist
|
;

datatype_decl ::=
TDEF ID COLON parameter_clist SEMICOLON
;

function_type ::= 
VOID 
| type;

//two-productions are needed to avoid ambiguity
parameter_clist ::= 
var_type parameter_clist2
|;

parameter_clist2 ::= 
COMMA var_type parameter_clist2
|;

block ::= 
LEFTBRACE local_decl_list statement_list RIGHTBRACE
| LEFTBRACE statement_list RIGHTBRACE
;

// Local declaration only allows variable declarations
local_decl_list ::= 
local_decl_list var_decl
| var_decl
;

statement_list ::= 
statement:s statement_list:sl
{: if (sl != null) {
                       sl.statements.add(s);
                       RESULT = new StmtListNode(sl.statements);
                   } else {
                       List<StmtNode> res = new ArrayList<StmtNode>();
                       res.add(s);
                       RESULT = new StmtListNode(res);
                   }
                :}
|statement:sl
{: List<StmtNode> res = new ArrayList<StmtNode>();
                   res.add(s);
                   RESULT = new StmtListNode(res); :}
                   ;

statement ::= 
assignment
| function_call
| ifelse
| while
| repeatuntil
| return
;

ifelse ::= 
IF LEFTPAREN expression:e RIGHTPAREN LEFTBRACE statement_list:sl1 RIGHTBRACE ELSE LEFTBRACE statement_list:sl2 RIGHTBRACE {: RESULT = new IfElseStmtNode(e,sl1,sl2); :}
;

while ::=
WHILE LEFTPAREN expression:e RIGHTPAREN DO LEFTBRACE statement_list:sl RIGHTBRACE 
                                  {: RESULT = new WhileStmtNode(e,sl); :}
;

repeatuntil ::= 
REPEAT LEFTBRACE statement_list:sl RIGHTBRACE UNTIL LEFTPAREN expression:e RIGHTPAREN SEMICOLON
                                  {: RESULT = new RepeatUntilStmtNode(sl,e); :}  
;

function_call ::=
ID LEFTPAREN expression_clist:ecl RIGHTPAREN
                                 {: RESULT = new FunctionCallStmtNode(ecl); :}  
;

return ::= 
RETURN expression:e SEMICOLON {: RESULT = new ReturnTStmtNode(e); :}
| RETURN SEMICOLON {: RESULT = new ReturnStmtNode(); :} 
;

assignment ::= 
accessor:a ASSIGN expression:e SEMICOLON {: RESULT = new AssignStmtNode(a,e); :} 
;

sequence ::=
STRINGLITERAL:str {: RESULT = new StringSeqNode(str); :}
| tuple
| list
;

accessor ::= 
ID:name 
{: List<IdNode> res = new ArrayList<IdNode>();
                   res.add(name);
                   RESULT = new AccessNode(res); :}
| accessor:a DOT ID:name 
{: if (a != null) {
                       a.ids.add(name);
                       RESULT = new AccessNode(a.ids);
                   } else {
                       List<IdNode> res = new ArrayList<IdNode>();
                       res.add(name);
                       RESULT = new IdNode(res);
                   }
                :}
;

tuple ::= 
LEFTTBRACKET expression_clist:ecl RIGHTTBRACKET {: RESULT = new TupleSeqNode(ecl); :}
;

list ::= 
LEFTBRACKET expression_clist:ecl RIGHTBRACKET {: RESULT = new ListSeqNode(ecl); :}
;

expression_clist ::= 
expression expression_clist2
| expression_clist2
;

expression_clist2 ::= 
COMMA expression expression_clist2
|
;

expression ::=
term
| NOT expression
| expression:e PLUS term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e MINUS term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e OR term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e IN term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e LESSTHAN term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e LESSTHANEQUAL term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e GREATERTHAN term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e GREATERTHANEQUAL term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e EQUAL term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e NOTEQUAL term:t
{: RESULT = new BinExprNode(e,t);:}
| expression:e CONCAT term:t
{: RESULT = new BinExprNode(e,t);:}
| expression LEFTBRACKET expression COLON expression RIGHTBRACKET
| expression LEFTBRACKET expression COLON RIGHTBRACKET
| expression LEFTBRACKET COLON expression RIGHTBRACKET
| expression LEFTBRACKET expression RIGHTBRACKET
;

term ::=
factor
| term MULTIPLY factor
| term DIVIDE factor
| term POWER factor
| term AND factor
;

factor ::=
exponent:e POWER factor:f {:RESULT = new FactorNode(e,f);:}
| exponent:e {: RESULT = new ExponentNode(e); :}
;

exponent ::=
MINUS exponent 
| final
;

final ::=
accessor
| LEFTPAREN expression RIGHTPAREN
| INTLITERAL
| FLOATLITERAL
| BOOLLITERAL
| CHARLITERAL
| function_call
| LENGTH LEFTPAREN expression RIGHTPAREN
| sequence // This includes STRINGLITERAL
;
