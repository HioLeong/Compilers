package Q;

import java_cup.runtime.*;

import sym;

/* Terminal */
terminal NOT, OR, AND;
terminal PLUS, MINUS, TIMES, DIVIDE, POWER;
terminal IN, CONCAT, LEN; 
terminal LESS, EQLESS, GREATER, GREATEREQ, EQ, NEQ;
terminal LCURL, RCURL;
terminal LPRAN, RPRAN;
terminal LBRACE, RBRACE;
terminal ASSIGN;
terminal COLON, SEMI, COMMA, DOT;
terminal LTUPLE, RTUPLE;
terminal FDEF, TDEF;
terminal IF, ELSE;
terminal DO, WHILE, UNTIL, REPEAT;
terminal RETURN;
terminal ID;
terminal VOID;
terminal Char CHAR;
terminal String STRING;
terminal int INT;
terminal float FLOAT; 
terminal bool BOOL;
terminal TYPE;

/* Non-Terminal */
non terminal operand;
non terminal type, return_type;
non terminal expression, statement, body;
non terminal control_flow;
non terminal function_definition;
non terminal function_call;
non terminal dot_notation;
non terminal main;
non terminal variable_assignment, variable_declaration, data_type_declaration;
non terminal variable_declaration_assignment, variable_initialisation;
non terminal parameter, parameters_list;
non terminal tuple, list;
non terminal sequence_indexing;

/* Precedence */
precedence right IN;
precedence left DOT;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, EQLESS, GREATER, GREATEREQ, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right POWER;
precedence right NOT; 
precedence left CONCAT;

/* Grammar */
operand ::= CHAR
		| STRING 
		| INT 
		| FLOAT 
		| BOOL
		| tuple
		| list
		| sequence_indexing;

type ::= TYPE
		| ID;

return_type ::= type 
				| VOID;

data_type_declaration ::= TDEF ID COLON parameters_list SEMI;

variable_declaration ::= ID COLON type SEMI
						| variable_declaration_assignment;

variable_initialisation ::= expression COMMA variable_initialisation
							| expression;

variable_assignment ::= ID ASSIGN variable_initialisation SEMI;

variable_declaration_assignment ::= ID COLON type ASSIGN variable_initialisation SEMI;

dot_notation ::= ID DOT dot_notation
				| ID;

expression ::= NOT expression {:System.out.println("NOT reduced");:}
			| expression OR expression {:System.out.println("OR reduced");:}
			| expression AND expression {:System.out.println("AND reduced");:}
			| expression PLUS expression {:System.out.println("PLUS reduced");:}
			| expression MINUS expression {:System.out.println("MINUS reduced");:}
			| expression TIMES expression {:System.out.println("TIMES reduced");:}
			| expression DIVIDE expression {:System.out.println("DIVIDE reduced");:}
			| expression POWER expression {:System.out.println("POWER reduced");:}
			| expression IN expression {:System.out.println("IN reduced");:}
			| expression CONCAT expression {:System.out.println("CONCAT reduced");:}
			| LEN LPRAN expression RPRAN {:System.out.println("LEN reduced");:}
			| expression LESS expression {:System.out.println("LESS reduced");:} 
			| expression EQLESS expression {:System.out.println("EQLESS reduced");:}
			| expression GREATER expression {:System.out.println("GREATER reduced");:}
			| expression GREATEREQ expression {:System.out.println("GREATEREQ reduced");:}
			| expression EQ expression {:System.out.println("EQ reduced");:}
			| expression NEQ expression {:System.out.println("NEQ reduced");:}
			| LPRAN expression RPRAN {:System.out.println("BRACES reduced");:}
			| dot_notation	
			| function_call
			| operand;

statement ::= variable_declaration
			| control_flow
			| function_definition;

body ::= statement body
		| statement;

control_flow ::= IF LPRAN expression RPRAN LCURL body RCURL ELSE LCURL body RCURL
				| WHILE LPRAN expression RPRAN DO LCURL body RCURL
				| REPEAT LCURL body RCURL UNTIL LPRAN expression RPRAN SEMI
				| RETURN expression SEMI;

function_definition ::= FDEF ID LPRAN parameters_list LPRAN SEMI return_type LCURL body RCURL SEMI;

function_call ::= ID LPRAN parameters_list RPRAN SEMI;

parameter ::= ID SEMI type;

parameters_list ::= parameter COMMA parameters_list
					| parameter;

tuple ::= LTUPLE variable_initialisation RTUPLE
		| LTUPLE RTUPLE;

list ::= LBRACE variable_initialisation RBRACE
		| LBRACE RBRACE;

sequence_indexing ::= ID LBRACE INT RBRACE;

main ::= LCURL body RCURL;