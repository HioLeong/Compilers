package Q;

import java_cup.runtime.*;

import sym;

/* Terminal */
terminal EOF, NOT, OR, AND;
terminal PLUS, MINUS, TIMES, DIVIDE, POWER;
terminal IN, CONCAT, LEN; 
terminal LESS, EQLESS, GREATER, GREATEREQ, EQ, NEQ;
terminal LCURL, RCURL;
terminal LPRAN, RPRAN;
terminal LBRACE, RBRACE;
terminal ASSIGN;
terminal COLON, SEMI, COMMA, DOT;
terminal LTUPLE, RTUPLE;
terminal FDEF, TDEF;
terminal IF, ELSE;
terminal DO, WHILE, UNTIL, REPEAT;
terminal RETURN;
terminal ID;
terminal VOID;
terminal Char CHAR;
terminal String STRING;
terminal int INT;
terminal float FLOAT; 
terminal bool BOOL;
terminal TYPE;

/* Non-Terminal */
non terminal operand;
non terminal type;
non terminal expression, statement, body;
non terminal control_flow;
non terminal function_definition;
non terminal function_call;
non terminal dot_notation;
non terminal variable_assignment, variable_declaration, data_type_declaration;
non terminal variable_declaration_assignment, variable_initialisation;
non terminal parameter, parameters_list;
non terminal tuple, list;

/* Precedence */

/* Grammar */
operand ::= CHAR
		| STRING 
		| INT 
		| FLOAT 
		| BOOL
		| tuple
		;

type ::= TYPE
		| ID;

data_type_declaration ::= TDEF ID COLON parameters_list SEMI;

variable_declaration ::= ID COLON type SEMI
						| variable_declaration_assignment;

variable_initialisation ::= expression COMMA variable_initialisation
							| expression;

variable_assignment ::= ID ASSIGN variable_initialisation SEMI;

variable_declaration_assignment ::= ID COLON type ASSIGN variable_initialisation SEMI;

dot_notation ::= ID DOT dot_notation
				| ID;

expression ::=  EOF expression
			| NOT expression
			| expression OR expression
			| expression AND expression
			| expression PLUS expression
			| expression MINUS expression
			| expression TIMES expression 
			| expression DIVIDE expression
			| expression POWER expression
			| expression IN expression
			| expression CONCAT expression
			| LEN LPRAN expression RPRAN
			| expression LESS expression
			| expression EQLESS EQLESS
			| expression GREATER expression
			| expression GREATEREQ expression
			| expression EQ expression
			| expression NEQ expression
			| LPRAN expression RPRAN
			| LBRACE expression RBRACE
			| dot_notation	
			| ID
			| operand;

statement ::= variable_declaration
			| control_flow
			| function_definition;

body ::= statement body
		| statement;

control_flow ::= IF LPRAN expression RPRAN LCURL body RCURL ELSE LCURL body RCURL
				| WHILE LPRAN expression RPRAN DO LCURL body RCURL
				| REPEAT LCURL body RCURL UNTIL LPRAN expression RPRAN SEMI
				| RETURN expression SEMI;

function_definition := FDEF ID LPRAN parameters_list LPRAN SEMI type LCURL body RCURL SEMI;

function_call ::= ID LPRAN parameters_list RPRAN SEMI;

parameter ::= ID SEMI type;

parameters_list ::= parameter COMMA parameters_list
					| parameter;

tuple ::= LTUPLE variable_initialisation RTUPLE
		| LTUPLE RTUPLE;

list ::= LBRACE variable_initialisation RBRACE;
		| LBRACE RBRACE;

