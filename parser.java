
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Mar 16 17:28:26 GMT 2013
//----------------------------------------------------

package Q;

import java_cup.runtime.*;
import sym;

/** CUP v0.10k generated parser.
  * @version Sat Mar 16 17:28:26 GMT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\017\007\000\002\016\006\000\002\016" +
    "\003\000\002\021\005\000\002\021\003\000\002\015\006" +
    "\000\002\020\010\000\002\014\005\000\002\014\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\006\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\004\000\002\010\003\000" +
    "\002\011\015\000\002\011\012\000\002\011\013\000\002" +
    "\011\005\000\002\012\015\000\002\013\007\000\002\022" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\004\000\002\025\005\000\002\025\004\000" +
    "\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\022\031\005\040\014\053\012\055\016\056" +
    "\007\057\004\060\017\061\006\001\002\000\052\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\030\ufffe\032\ufffe\036\ufffe\041\ufffe\001" +
    "\002\000\032\004\021\016\031\027\025\031\005\032\124" +
    "\040\014\053\023\055\016\056\007\057\004\060\017\061" +
    "\006\001\002\000\052\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\030\ufffc" +
    "\032\ufffc\036\ufffc\041\ufffc\001\002\000\052\002\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\030\uffff\032\uffff\036\uffff\041\uffff\001\002" +
    "\000\004\002\123\001\002\000\052\002\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\030\ufffa\032\ufffa\036\ufffa\041\ufffa\001\002\000\004" +
    "\031\100\001\002\000\052\002\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\030" +
    "\ufffb\032\ufffb\036\ufffb\041\ufffb\001\002\000\032\004\021" +
    "\016\031\027\025\031\005\040\014\041\020\053\023\055" +
    "\016\056\007\057\004\060\017\061\006\001\002\000\052" +
    "\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\030\ufff9\032\ufff9\036\ufff9\041" +
    "\ufff9\001\002\000\052\002\001\005\001\006\001\007\001" +
    "\010\001\011\001\012\001\013\001\014\001\015\001\017" +
    "\001\020\001\021\001\022\001\023\001\024\001\030\001" +
    "\032\001\036\001\041\001\001\002\000\052\002\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\030\ufffd\032\ufffd\036\ufffd\041\ufffd\001\002" +
    "\000\052\002\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\030\uffc7\032\uffc7\036" +
    "\uffc7\041\uffc7\001\002\000\030\004\021\016\031\027\025" +
    "\031\005\040\014\053\023\055\016\056\007\057\004\060" +
    "\017\061\006\001\002\000\050\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\030\uffd8" +
    "\032\uffd8\036\uffd8\041\uffd8\001\002\000\056\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\027\101\030\uffec\031\100\032\uffec\036\uffec\037\102" +
    "\041\uffec\001\002\000\046\005\053\006\035\007\044\010" +
    "\034\011\051\012\036\013\050\014\037\015\043\017\047" +
    "\020\046\021\040\022\041\023\045\024\042\032\ufff0\036" +
    "\076\041\ufff0\001\002\000\030\004\021\016\031\027\025" +
    "\031\005\040\014\053\023\055\016\056\007\057\004\060" +
    "\017\061\006\001\002\000\004\041\073\001\002\000\050" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\030\uffd9\032\uffd9\036\uffd9\041\uffd9\001" +
    "\002\000\050\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7\032\uffd7\036\uffd7" +
    "\041\uffd7\001\002\000\004\027\032\001\002\000\030\004" +
    "\021\016\031\027\025\031\005\040\014\053\023\055\016" +
    "\056\007\057\004\060\017\061\006\001\002\000\042\005" +
    "\053\006\035\007\044\010\034\011\051\012\036\013\050" +
    "\014\037\015\043\017\047\020\046\021\040\022\041\023" +
    "\045\024\042\030\052\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\030\004\021\016\031" +
    "\027\025\031\005\040\014\053\023\055\016\056\007\057" +
    "\004\060\017\061\006\001\002\000\004\020\060\001\002" +
    "\000\030\004\021\016\031\027\025\031\005\040\014\053" +
    "\023\055\016\056\007\057\004\060\017\061\006\001\002" +
    "\000\030\004\021\016\031\027\025\031\005\040\014\053" +
    "\023\055\016\056\007\057\004\060\017\061\006\001\002" +
    "\000\030\004\021\016\031\027\025\031\005\040\014\053" +
    "\023\055\016\056\007\057\004\060\017\061\006\001\002" +
    "\000\050\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\030\uffe1\032\uffe1\036\uffe1\041" +
    "\uffe1\001\002\000\030\004\021\016\031\027\025\031\005" +
    "\040\014\053\023\055\016\056\007\057\004\060\017\061" +
    "\006\001\002\000\050\005\uffea\006\035\007\044\010\034" +
    "\011\051\012\036\013\050\014\uffea\015\043\017\047\020" +
    "\046\021\040\022\041\023\045\024\042\030\uffea\032\uffea" +
    "\036\uffea\041\uffea\001\002\000\050\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\050\014\uffe6\015\043" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\030" +
    "\uffe6\032\uffe6\036\uffe6\041\uffe6\001\002\000\050\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\050\014" +
    "\uffe4\015\043\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\030\uffe4\032\uffe4\036\uffe4\041\uffe4\001\002\000" +
    "\034\005\uffe0\006\uffe0\007\044\010\034\011\051\012\036" +
    "\013\050\014\uffe0\015\043\030\uffe0\032\uffe0\036\uffe0\041" +
    "\uffe0\001\002\000\050\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\030\uffdf\032\uffdf" +
    "\036\uffdf\041\uffdf\001\002\000\034\005\uffdc\006\uffdc\007" +
    "\044\010\034\011\051\012\036\013\050\014\uffdc\015\043" +
    "\030\uffdc\032\uffdc\036\uffdc\041\uffdc\001\002\000\050\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\051\012\036\013\050" +
    "\014\uffe8\015\043\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\030\uffe8\032\uffe8\036\uffe8\041\uffe8\001\002" +
    "\000\050\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\030\uffe2\032\uffe2\036\uffe2\041" +
    "\uffe2\001\002\000\034\005\uffdb\006\uffdb\007\044\010\034" +
    "\011\051\012\036\013\050\014\uffdb\015\043\030\uffdb\032" +
    "\uffdb\036\uffdb\041\uffdb\001\002\000\034\005\uffdd\006\uffdd" +
    "\007\044\010\034\011\051\012\036\013\050\014\uffdd\015" +
    "\043\030\uffdd\032\uffdd\036\uffdd\041\uffdd\001\002\000\034" +
    "\005\uffde\006\uffde\007\044\010\034\011\051\012\036\013" +
    "\050\014\uffde\015\043\030\uffde\032\uffde\036\uffde\041\uffde" +
    "\001\002\000\050\005\053\006\035\007\044\010\034\011" +
    "\051\012\036\013\050\014\037\015\043\017\047\020\046" +
    "\021\040\022\041\023\045\024\042\030\uffe3\032\uffe3\036" +
    "\uffe3\041\uffe3\001\002\000\050\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\050\014\uffe5\015\043\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5" +
    "\032\uffe5\036\uffe5\041\uffe5\001\002\000\050\005\uffe9\006" +
    "\uffe9\007\044\010\034\011\051\012\036\013\050\014\uffe9" +
    "\015\043\017\047\020\046\021\040\022\041\023\045\024" +
    "\042\030\uffe9\032\uffe9\036\uffe9\041\uffe9\001\002\000\050" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\051\012\036\013" +
    "\050\014\uffe7\015\043\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\030\uffe7\032\uffe7\036\uffe7\041\uffe7\001" +
    "\002\000\052\002\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\030\uffc8\032\uffc8" +
    "\036\uffc8\041\uffc8\001\002\000\042\005\053\006\035\007" +
    "\044\010\034\011\051\012\036\013\050\014\037\015\043" +
    "\017\047\020\046\021\040\022\041\023\045\024\042\030" +
    "\075\001\002\000\050\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\030\uffda\032\uffda" +
    "\036\uffda\041\uffda\001\002\000\030\004\021\016\031\027" +
    "\025\031\005\040\014\053\023\055\016\056\007\057\004" +
    "\060\017\061\006\001\002\000\006\032\ufff1\041\ufff1\001" +
    "\002\000\004\057\120\001\002\000\004\053\105\001\002" +
    "\000\004\053\103\001\002\000\052\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\030" +
    "\uffec\032\uffec\036\uffec\037\102\041\uffec\001\002\000\050" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\030\uffed\032\uffed\036\uffed\041\uffed\001" +
    "\002\000\004\035\114\001\002\000\004\030\112\001\002" +
    "\000\006\030\uffc9\036\110\001\002\000\004\053\105\001" +
    "\002\000\004\030\uffca\001\002\000\004\035\113\001\002" +
    "\000\050\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\030\uffcc\032\uffcc\036\uffcc\041" +
    "\uffcc\001\002\000\006\053\115\062\117\001\002\000\006" +
    "\030\ufff7\036\ufff7\001\002\000\006\030\uffcb\036\uffcb\001" +
    "\002\000\006\030\ufff8\036\ufff8\001\002\000\004\032\121" +
    "\001\002\000\052\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\030\uffc4\032" +
    "\uffc4\036\uffc4\041\uffc4\001\002\000\050\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\043\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\030\uffeb\032\uffeb\036\uffeb\041\uffeb\001\002\000\004\002" +
    "\000\001\002\000\052\002\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5" +
    "\032\uffc5\036\uffc5\041\uffc5\001\002\000\004\032\126\001" +
    "\002\000\052\002\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\030\uffc6\032\uffc6" +
    "\036\uffc6\041\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\012\003\007\024\012\025\010\026\014\001" +
    "\001\000\002\001\001\000\022\003\027\006\023\013\021" +
    "\014\026\021\124\024\012\025\010\026\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\027\006\023\013\021\014\026\021\025\024\012\025\010" +
    "\026\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\027\006\121" +
    "\013\021\014\026\024\012\025\010\026\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\027\006\073\013\021\014\026\024\012\025\010\026" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\027\006\032\013" +
    "\021\014\026\024\012\025\010\026\014\001\001\000\002" +
    "\001\001\000\020\003\027\006\071\013\021\014\026\024" +
    "\012\025\010\026\014\001\001\000\020\003\027\006\070" +
    "\013\021\014\026\024\012\025\010\026\014\001\001\000" +
    "\020\003\027\006\067\013\021\014\026\024\012\025\010" +
    "\026\014\001\001\000\020\003\027\006\066\013\021\014" +
    "\026\024\012\025\010\026\014\001\001\000\020\003\027" +
    "\006\065\013\021\014\026\024\012\025\010\026\014\001" +
    "\001\000\020\003\027\006\064\013\021\014\026\024\012" +
    "\025\010\026\014\001\001\000\020\003\027\006\063\013" +
    "\021\014\026\024\012\025\010\026\014\001\001\000\020" +
    "\003\027\006\062\013\021\014\026\024\012\025\010\026" +
    "\014\001\001\000\020\003\027\006\061\013\021\014\026" +
    "\024\012\025\010\026\014\001\001\000\020\003\027\006" +
    "\060\013\021\014\026\024\012\025\010\026\014\001\001" +
    "\000\002\001\001\000\020\003\027\006\056\013\021\014" +
    "\026\024\012\025\010\026\014\001\001\000\020\003\027" +
    "\006\055\013\021\014\026\024\012\025\010\026\014\001" +
    "\001\000\020\003\027\006\054\013\021\014\026\024\012" +
    "\025\010\026\014\001\001\000\002\001\001\000\020\003" +
    "\027\006\053\013\021\014\026\024\012\025\010\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\027" +
    "\006\023\013\021\014\026\021\076\024\012\025\010\026" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\106\023\105\001\001\000\004\014\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\106\023\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sequence_indexing ::= ID LBRACE INT RBRACE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*sequence_indexing*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list ::= LBRACE RBRACE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list ::= LBRACE variable_initialisation RBRACE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tuple ::= LTUPLE RTUPLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*tuple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tuple ::= LTUPLE variable_initialisation RTUPLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*tuple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameters_list ::= parameter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*parameters_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameters_list ::= parameter COMMA parameters_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*parameters_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameter ::= ID SEMI type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= ID LPRAN parameters_list RPRAN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*function_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_definition ::= FDEF ID LPRAN parameters_list LPRAN SEMI return_type LCURL body RCURL SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*function_definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control_flow ::= RETURN expression SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*control_flow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control_flow ::= REPEAT LCURL body RCURL UNTIL LPRAN expression RPRAN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*control_flow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_flow ::= WHILE LPRAN expression RPRAN DO LCURL body RCURL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*control_flow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // control_flow ::= IF LPRAN expression RPRAN LCURL body RCURL ELSE LCURL body RCURL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*control_flow*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body ::= statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // body ::= statement body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= function_definition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= control_flow 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= variable_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= operand 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= function_call 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= dot_notation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= LPRAN expression RPRAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression NEQ expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression EQ expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression GREATEREQ expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression GREATER expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression EQLESS EQLESS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression LESS expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= LEN LPRAN expression RPRAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression CONCAT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression IN expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression POWER expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression DIVIDE expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression TIMES expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression MINUS expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression PLUS expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression AND expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression OR expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= NOT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dot_notation ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*dot_notation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dot_notation ::= ID DOT dot_notation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*dot_notation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_declaration_assignment ::= ID COLON type ASSIGN variable_initialisation SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*variable_declaration_assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_assignment ::= ID ASSIGN variable_initialisation SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_initialisation ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*variable_initialisation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_initialisation ::= expression COMMA variable_initialisation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*variable_initialisation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable_declaration ::= variable_declaration_assignment 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declaration ::= ID COLON type SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_type_declaration ::= TDEF ID COLON parameters_list SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*data_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // return_type ::= VOID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*return_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // return_type ::= type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*return_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TYPE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operand ::= sequence_indexing 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operand ::= list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operand ::= tuple 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operand ::= BOOL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operand ::= FLOAT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operand ::= INT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operand ::= STRING 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= operand EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // operand ::= CHAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

